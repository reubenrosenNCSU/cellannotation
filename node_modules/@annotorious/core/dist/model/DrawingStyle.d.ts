import { Annotation } from './Annotation';
import { AnnotationState } from './AnnotationState';
type RGB = `rgb(${number}, ${number}, ${number})`;
type RGBA = `rgba(${number}, ${number}, ${number}, ${number})`;
type HEX = `#${string}`;
export type Color = RGB | RGBA | HEX;
export interface DrawingStyle {
    fill?: Color;
    fillOpacity?: number;
    stroke?: Color;
    strokeOpacity?: number;
    strokeWidth?: number;
}
export type DrawingStyleExpression<T extends Annotation = Annotation> = DrawingStyle | ((annotation: T, state?: AnnotationState) => DrawingStyle | undefined);
/** Utility functions **/
export declare const computeStyle: <T extends Annotation = Annotation>(annotation: T, style: DrawingStyleExpression<T>, state?: AnnotationState) => DrawingStyle | undefined;
export declare const chainStyles: <T extends Annotation = Annotation>(applyFirst: DrawingStyleExpression<T>, applySecond: DrawingStyleExpression<T>) => ((a: T, state: AnnotationState) => {
    fill?: Color;
    fillOpacity?: number;
    stroke?: Color;
    strokeOpacity?: number;
    strokeWidth?: number;
}) | {
    fill?: Color;
    fillOpacity?: number;
    stroke?: Color;
    strokeOpacity?: number;
    strokeWidth?: number;
};
export {};
//# sourceMappingURL=DrawingStyle.d.ts.map